---
import Layout from "../layouts/layout.astro";
---
<Layout>

<section>
<main class="pb-16 lg:pb-24 bg-white dark:bg-gray-900">
  <header class="bg-[url('https://www.nippon.com/en/ncommon/contents/japan-data/1971940/1971940.jpg')] w-full h-[460px] xl:h-[537px] bg-no-repeat bg-cover bg-center bg-blend-darken relative">
      <div class="absolute top-0 left-0 w-full h-full bg-black bg-opacity-50"></div>
      <div class="absolute top-20 left-1/2 px-4 mx-auto w-full max-w-screen-xl -translate-x-1/2 xl:top-1/2 xl:-translate-y-1/2 xl:px-0">
          <h1 class="mb-4 max-w-4xl text-2xl font-extrabold leading-none text-white sm:text-3xl lg:text-4xl">A focus on fundamentals</h1>
          <p class="text-lg font-normal text-gray-300"></p>
      </div>
  </header>


  <div class="flex relative z-20 justify-between p-6 -m-36 mx-4 max-w-screen-xl bg-white dark:bg-gray-800 rounded xl:-m-32 xl:p-9 xl:mx-auto">
      <article class="xl:w-[828px] w-full max-w-none format format-sm sm:format-base lg:format-lg format-blue dark:format-invert">
          <div class="flex flex-col lg:flex-row justify-between lg:items-center">
              <div class="flex items-center space-x-3 text-gray-500 dark:text-gray-400 text-base mb-2 lg:mb-0">
              </div>
          </div>
          

<p class="lead">Software is a fast evolving industry and learning never ends. So we designed our courses to teach you the fundamentals, this will give you easier time to learn new things in the future. You can think of this place that will help you from takeoff runway and bring you up to speed until you can fly with your own wings. That's Mach10.</p> 

<p class="lead">Ok so let's start with one the first and probably most important question at this stage.</p>

<h2>1. Why even learn software engineering?</h2>

<p><i><b>“Study hard so that you can get good grades so that you can get into a good college so that you can get a good job and a good salary so that you can make money and a good living.”</b></i></p>
<p>This is how all of us are brought up. We are conditioned in a way that to live a good life it is must to have a (safe) job that will guarantee lifetime employment. But is it enough to live a good life? For someone extraordinary like you who are here, I am sure it isn’t.</p>

<p>Just like everywhere else, Japan has a lot of very smart people who were just led on the ordinary road following the ordinary people and ordinary rules they made.</p>

<p>So why become a software engineer? Engineering is about solving problems with technology and innovation. Without engineers, you wouldn't have a smartphone, or computer, you couldn't even place a phone call. Innovation has the power to create new products and also, create jobs.</p>

<p>There are always a lot of opportunities to come up with, we just need to look for them. We should probably stop going with the primitive idea of studying to get a job, rather, we should study to generate thousands of them. Switching from the “consumer mindset” to a “producer mindset” is powerful. Instead of consuming content, apps or services, focus on what you believe the world needs now and build it. That’s the kind of superpower engineers have.</p>

<p>The ability to work on your own idea is much more satisfying, fills you with happiness, this is much more powerful than buying or owning anything. Why do you think rich engineers / tech founders still continue to work? The feeling of producing products, tech or jobs is the most powerful we can experience in life.</p>

<p>Unlike many other kinds of jobs, software engineering is something that can be learnt by yourself. The most amazing engineers I have met in my career so far were not great students and didn’t even make it to university for many of them. They were not geniuses as well, just random people like you and I. They simply went on their own path and started to like it more and more.</p>

<h2>2. Focus on the fundamentals of software engineering. Why?</h2>

<p>Unlike popular belief, software engineering is closer to art than science. It could even be compared to composing music, painting or even martial arts. Ask 100 software engineers to create a software and you will end up with 100 different solutions.</p>
<p>Some will be more or less elegant, some will emphasize on speed, some will focus on to be easy to read. Just like music, you could learn to play piano in a few weeks, but coming up with a beautiful melody requires inspiration and creativity . Just like martial arts, you can see a kata in a book, but you need to practice it over and over and learn to “feel” it.</p>
<p>When reading the code someone wrote, I believe you can understand about his personality and mindset. In this sense, I like to think of software engineering as an art as it's also a way to express ourselves.</p>


<h2>3. Build not just websites, but apps and backends too. Why?</h2>

<p>Without realizing it, you are using backends multiples times a day. When you refresh your Instagram feed, playing an online game, listening a song on Spotify, watching Netflix, checking your bank account savings, browsing your favorite online shop, chatting with your friends on LINE. All of these activities are possible thanks to a backend running somewhere in the world. </p>
<p>Not only all these activities involve a backend but the backend is actually always the central piece that keeps everything running well, organized and smooth. Backends are everywhere and they more or less rule our world today. Backends were here from the early days of Internet and they’re here to stay.</p>
<p>So what are they actually? To put it simply, a backend is a set of lines of code running on one (or multiple) servers somewhere. The role of a backend can be multiple. For LINE for instance, it would be receiving the message you want to send to your friend, and forward it to your friend. If your friend has her mobile off, it would keep the message until it can deliver it properly.</p>
<p>Backend can be programmed with many different programming language. Each language has its advantages and inconvenient. Think of a programming language just like any other language, it has vocabulary, grammar and rules. Learning a programming language is basically gaining the ability to make a computer perform anything for you in an automated way. </p>
<p>This course focuses on the Go (also sometimes referred as Golang) programming language as a primary language.</p>
<p>Go was designed at Google by Ken Thompson, Robert Griesemer and Rob Pike. Ken Thompson is one of the pioneers of computer science with an amazing contribution to the world of programming languages.</p>

<h2>4. Why Go? (also known as Golang)</h2>
<p>As Google is running thousands of different backend and servers, they realized most programming languages were either too complicated, too slow to run or too time consuming to write for their engineers. They needed something productive, simple and fast.</p>
<p>As a result, Go was invented at Google to create powerful backends. Go focuses on simplicity over complexity. It is also a friendly language to learn for newcomers, yet, it will open many new opportunities for you to do anything you want.</p>

<p><i><b>If it’s so great, is Go used everywhere for backend then?</b></i></p>

<p>Not really. While Go is used by most tech startups nowadays, Go is still relatively new in the history of computer programming. Backend are built by people who will usually use the programming languages they know best. There is always a matter of personal preference as well. Thanks to its strong support from Google and by its simplicity, Go is gaining popularity and is a great investment in your own future. This is the language we will learn to teach you the fundamentals of programming.</p>

<h2>5. Ok so what will I learn?</h2>

        <p></p>

          <ol>
              <li><strong>Mindset of learning</strong>. TODO
              </li>
              <li><strong>Fundamentals of programming</strong>. TODO</li>
              <li><strong>Fundamentals of programming</strong>. TODO</li>
              <li><strong>Fundamentals of programming</strong>. TODO</li>
              <li><strong>Fundamentals of programming</strong>. TODO</li>
              <li><strong>Fundamentals of programming</strong>. TODO</li>
          </ol>

<p>Last but not least, remember this is a start of a journey. When you start to learn software engineering, the learning never ends.</p>

</div>
</main>
</section>
</Layout>